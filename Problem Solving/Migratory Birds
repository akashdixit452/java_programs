import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

public class Solution {

    // Complete the migratoryBirds function below.
    static int migratoryBirds(List<Integer> arr) {
        boolean visited[] = new boolean[arr.size()];
        int max_frequency = 0,max_index = 0;
        Arrays.fill(visited,false);
        for(int i =0;i<arr.size();i++){
            if(visited[i]== true)
                continue;
            int count =1;
            for(int k=i+1;k<arr.size();k++){
                if(arr.get(i)==arr.get(k)){
                    visited[k]=true;
                    count++;

                }

            }
        if(count > max_frequency){
            max_frequency =count;
            max_index = i;
        }
        else if(count == max_frequency){
            if(arr.get(max_index)>arr.get(i))
                max_index=i;
            
        }
        }
        return arr.get(max_index);
    }

    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int arrCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
            .map(Integer::parseInt)
            .collect(toList());

        int result = migratoryBirds(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
